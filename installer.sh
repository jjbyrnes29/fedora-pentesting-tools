#!/bin/bash
version=1.0.0

modules=(
"00"
 "11"  "12"  "13"  "14"  "15"
 "21"  "22"  "23"  "24"  "25"  "26"
 "31"  "32"  "33" 
 "41"  "42"  "43"  "44"  "45"  "46"  "47"  "48"  "49"
 "51"  "52"  "53"  "54"  "55"  "56"  "57"  "58"
 "61"  "62"  "63"  "64"  "65"
 "71"  "72"  "73"  "74"  "75"  "76"  "77"
 "81"  "82"  "83"  "84"  "85"  "86"
 "91"  "92"
"101" "102"
)

usage() {
  echo "Do not invoke this script manually. Use updater as it will pull new versions of this script"
  exit 1
}

str="$*"
if [ -z "${str}" ]; then
  usage
fi

IFS=', ' read -ra to_install <<< "$str"

for key in "${to_install[@]}"; do
  not_found=true
  for value in "${modules[@]}"; do
    if [ "$key" = "$value" ]; then
      not_found=false
    fi
  done
  if [ "$not_found" == true ]; then
    clear
    if [[ "$key" == *"-"* ]]; then
      echo "Package $key not in available Modules"
    fi
    echo "Please download new updater"
    exit 1
  fi
done

for ((i=0; i<${#to_install[@]}; i++));  do
  for ((j=i+1; j<${#to_install[@]}; j++)); do
    if [[ "${to_install[i]}" == "${to_install[j]}" ]]; then
      echo "Incorrect Paramaters"
      exit 1
    fi
  done
done

array=("${to_install[@]}")
if [ "${to_install[0]}" -eq 0 ]; then
  array=("${modules[@]}")
fi

for element in "${array[@]}"; do
  case $element in
    "01-01")
      sudo dnf install -y fail2ban-all
    ;;
    "01-02")
      sudo dnf install -y chkrootkit
    ;; 
    "01-03")
      sudo dnf install -y rkhunter
    ;;
    "01-04")
      sudo dnf install -y clamav
    ;;
    "01-05")
      sudo dnf install -y keepassxc
    ;;
    "02-01")
      sudo dnf install -y proxychains-ng
    ;;
    "02-02")
      sudo dnf install -y tor
    ;;
    "02-03")
      sudo dnf install -y torbrowser-launcher
    ;;
    "02-04")
      sudo dnf install -y macchanger
    ;;
    "02-05")
      sudo dnf install -y git golang
      git clone http://github.com/nicocha30/ligolo-ng.git
      cd ligolo-ng
      go build -o agent cmd/agent/main.go
      go build -o proxy cmd/proxy/main.go
      sudo mv proxy /usr/bin/ligolo-ng
      mkdir -p /usr/share/shells
      sudo mv agent /usr/share/shells/ligolo-ng-agent
      sudo ip tuntap add user "$USER" mode tun ligolo
      sudo ip link set ligolo up
      cd ..
      rm -rf ligolo-ng
    ;;
    "02-06")
      sudo dnf install -y wireguard-tools
    ;;
    "03-01")
      sudo dnf install -y postgresql curl libxcrypt-compat
      curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb > msfinstall && chmod 755 msfinstall && ./msfinstall
      sudo rm msfinstall
      msfdb init
    ;;
    "03-02")
      sudo dnf install python3-pip git
      git clone https://www.github.com/threat9/routersploit
      sudo python -m pip install -r routersploit/requirements.txt
      python -m pip install -r routersploit/requirements.txt
      sudo mv routersploit/ /opt
      sudo echo 'sudo python /opt/routersploit/rsf.py "$@"' | sudo tee /usr/bin/rsf >/dev/null
      sudo chmod +x /usr/bin/rsf
    ;;
    "03-03")
      sudo dnf install -y snapd
      sudo ln -s /var/lib/snapd/snap /snap
      snap install exploitdb-papers
      snap install searchsploit
    ;;
    "04-01")
      sudo dnf install -y nmap
    ;;
    "04-02")
      sudo dnf install -y wireshark
    ;;
    "04-03")
      sudo dnf install python3-pip
      sudo pip3 install dirsearch
    ;;
    "04-04")
      sudo dnf install -y gobuster
    ;;
    "04-05")
      sudo dnf install -y python3-pip git
      sudo python3 -m pip install git+https://github.com/Tib3rius/Autorecon.git
    ;;
    "04-06")
      sudo dnf install -y whatweb
    ;;
    "04-07")
      curl -sL https://raw.githubusercontent.com/epi052/feroxbuster/main/install-nix.sh | sudo bash -s /usr/bin
    ;;
    "04-08")
      sudo dnf install -y git python3-pip
      git clone https://github.com/darkoperator/dnsrecon.git
      cd dnsrecon
      pip install -r requirements.txt --no-warn-script-location
      cd ..
      sudo mv dnsrecon/ /opt
      sudo echo 'sudo python3 /opt/dnsrecon/dnsrecon.py "$@"' | sudo tee /usr/bin/dnsrecon
      chmod +x dnsrecon
    ;;
    "04-09")
      sudo dnf install -y nikto
    ;;
    "04-10")
    ;;
    "05-01")
      sudo dnf install -y wireshark
    ;;
    "05-02")
      sudo dnf install libtool pkgconfig sqlite-devel autoconf automake openssl-devel libpcap-devel pcre2-devel rfkill libnl3-devel gcc gcc-c++ ethtool hwloc-devel libcmocka-devel make file expect hostapd wpa_supplicant iw usbutils tcpdump screen zlib-devel expect git
      git clone https://github.com/aircrack-ng/aircrack-ng.git
      cd aircrack-ng
      autoreconf -i
      ./configure
      make && sudo make install
      cd ..
      sudo rm -rf aircrack-ng
    ;;
    "05-03")
      sudo dnf install git make gcc libpcap-devel libpcap hcxtools
      git clone https://github.com/ZerBea/hcxdumptool.git
      cd hcxdumptool
      make -j $(nproc) && sudo make install
      cd ..
      rm -rf hcxdumptool
    ;;
    "05-04")
      sudo dnf install pkgconfig libnl3-devel libnl3 libpcap-devel git
      git clone https://github.com/aircrack-ng/mdk4.git
      cd mdk4
      make && sudo make install
      cd ..
      rm -rf mdk4
    ;;
    "05-05")
      sudo dnf install bettercap
    ;;
    "05-06")
      sudo dnf install -y scapy
      pip install cryptography
    ;;
    "05-07")
      sudo dnf install -y dsniff
    ;;
    "05-08")
      sudo dnf install -y arp-scan
    ;;
    "06-01")
      sudo dnf install -y git
      sudo mkdir -p /usr/share/shells
      git clone http://github.com/flozz/p0wny-shell
      sudo mv p0wny-shell/shell.php /usr/share/shells/p0wny-shell.php
      sudo rm -rf p0wny-shell
      git clone http://github.com/BlackArch/webshells
      sudo rm -rf webshells/.gitignore webshells/README.md
      sudo mv webshells/* /usr/share/shells
    ;;
    "06-02")
      sudo dnf install -y git
      git clone https://www.github.com/L-codes/Neo-reGeorg.git
      sudo mv Neo-reGeorg /opt
      sudo echo 'sudo python3 /opt/Neo-reGeorg/neoreg.py "$@"' | sudo tee /usr/bin/neoreg
      sudo chmod +x /usr/bin/neoreg
    ;;
    "06-03")
      sudo dnf install -y wget
      sudo rm -rf /usr/share/windows-resources/mimikatz/*
      wget https://www.github.com/gentilkiwi/mimikatz/releases/latest/download/mimikatz_trunk.zip
      sudo mkdir -p /usr/share/mimikatz
      sudo unzip -o mimikatz_trunk.zip -d /usr/share/mimikatz/mimikatz
      rm -f mimikatz_trunk.zip
    ;;
    "06-04")
      sudo dnf install -y wget
      wget http://github.com/carlospolop/PEASS-ng/releases/latest/download/linpeas.sh
      wget http://github.com/carlospolop/PEASS-ng/releases/latest/download/winPEAS.bat
      sudo mkdir -p /usr/share/scripts
      sudo mv linpeas.sh /usr/share/scripts/linpeas.sh
      sudo mv winPEAS.bat /usr/share/scripts/winPEAS.bat
      sudo chmod +x /usr/share/scripts/linpeas.sh
    ;;
    "06-05")
      sudo dnf install -y python3-pip python-netifaces git
      git clone https://github.com/lgandx/Responder.git
      sudo pip install pyasn1
      sudo mv Responder/ /opt
      sudo echo 'sudo python /opt/Responder/Responder.py "$@"' | sudo tee /usr/bin/responder
      sudo chmod +x /usr/bin/responder
    ;;
    "07-01")
      sudo dnf install -y wget unzip make cmake libjpeg-turbo-devel libmcrypt-devel mhash-devel
      VER=$(wget -qO- https://github.com/RickdeJager/stegseek/releases/latest | grep "Release Stegseek" | head -1 | awk '{print $3}')
      wget https://github.com/RickdeJager/stegseek/archive/refs/tags/"$VER".zip
      unzip -o "$VER".zip && rm -rf "$VER".zip
      NAME=$(echo "$VER" | cut -c 2-)
      STEGSEEK="stegseek-"
      cd "${STEGSEEK}${NAME}"
      mkdir build && cd build
      cmake -DCMAKE_BUILD_TYPE=Release .. && make && sudo make install
      cd ../..
      rm -rf "${STEGSEEK}${NAME}"
    ;;
    "07-02")
      sudo dnf install -y zbar
    ;;
    "07-03")
      sudo dnf install -y qrencode
    ;;
    "07-04")
      sudo dnf install -y git python3-pip
      git clone https://github.com/trustedsec/social-engineer-toolkit setoolkit/
      cd setoolkit
      sed 's/pycrypto/pycryptodome/' requirements.txt | sudo tee requirements.txt > /dev/null
      sudo pip3 install -r requirements.txt
      pip3 install -r requirements.txt
      sudo ./setup.py
      cd ..
      rm -rf setoolkit
    ;;
    "07-05")
      sudo dnf install -y snapd
      sudo ln -s /var/lib/snapd/snap /snap
      sudo install morse-encode-and-decode
    ;;
    "07-06")
      sudo dnf install -y git python3-pip
      git clone https://github.com/laramies/theHarvester
      cd theHarvester
      python3 -m pip install -r requirements/base.txt
      sudo python3 -m pip install -r requirements/base.txt
      cd ..
      sudo mv theHarvester /opt
      sudo echo 'python3 /opt/theHarvester/theHarvester.py "$@"' | sudo tee /usr/bin/theHarverster
      sudo chmod +x /usr/bin/theHarvester 
    ;;
    "07-07")
      sudo dnf install -y snapd
      sudo ln -s /var/lib/snapd/snap /snap
      snap install cyberchef
    ;;
    "08-01")
      sudo dnf install -y golang git
      git clone https://github.com/mdawsonuk/LevelDBDumper.git
      cd LevelDBDumper
      go get github.com/syndtr/goleveldb/leveldb
      go get github.com/hashicorp/go-version
      go get github.com/gookit/color
      cd src/LevelDBDumper
      go build
      sudo mv LevelDBDumper /usr/bin
      cd ../../..
      rm -rf LevelDBDumper
    ;;
    "08-02")
      sudo dnf install -y snapd
      sudo ln -s /var/lib/snapd/snap /snap
      snap install ghidra
    ;;
    "08-03")
      sudo dnf install -y sqlitebrowser
    ;;
    "08-04")
      sudo dnf install -y binwalk
    ;;
    "08-05")
      sudo dnf install -y snap python3-pip
      sudo ln - s /var/lib/snapd/snap /snap
      snap install sqlmap --edge
    ;;
    "08-06")
      sudo dnf install -y sqlninja
      sudo cp /usr/share/doc/sqlninja/sqlninja.conf /etc
      echo
      echo "THIS TOOL NEEDS CONFIGURING BEFORE USE. CONFIGURE /etc/sqlninja.conf"
      sleep 7
    ;;
    "09-01")
      sudo dnf install -y hashcat
    ;;
    "09-02")
      sudo dnf install -y yasm gmp-devel bzip2-devel john git gcc openssl-devel zlib-devel libpcap-devel cmake bison flex clang perl
      git clone --recursive https://github.com/teeshop/rexgen
      cd rexgen
      ./build.sh
      sudo ./install.sh
      sudo echo "/usr/local/lib" | sudo tee /etc/ld.so.conf.d/libc.conf >/dev/null
      sudo ldconfig
      cd .. && rm -rf rexgen
      git clone https://github.com/openwall/john -b bleeding-jumbo john
      cd john/src
      ./configure --enable-rexgen && make -s clean && make -sj4
      cd ..
      sudo mkdir /opt/john
      sudo mv run/* /opt/john
      cd ..
      sudo rm -rf john
      sudo rm -rf /opt/john/john
      echo 'export PATH="/opt/john:$PATH"' | tee -a /home/"$USER"/.bashrc  >/dev/null
      sudo echo 'export PATH="/opt/john:$PATH"' | sudo tee -a /root/.bashrc >/dev/null
      for file in /opt/john/*; do
        ext="${file##*.}"
        if [ "$ext" == py ]; then
          sudo mv "$file" /opt/john/'$(basename "$file" .py)'
        fi
        if [ "$ext" == pl ]; then
          sudo mv "$file" /opt/john/'$(basename "$file" .pl)'
        fi
      done
      sudo rm -rf /opt/john/base64conv /opt/john/gpg2john /opt/john/rar2john /opt/john/unafs /opt/john/undrop /opt/john/unique /opt/john/unshadow /opt/john/zip2john
      sudo ln -s /usr/bin/john /opt/john/base64conv
      sudo ln -s /usr/bin/john /opt/john/gpg2john
      sudo ln -s /usr/bin/john /opt/john/rar2john
      sudo ln -s /usr/bin/john /opt/john/unafs
      sudo ln -s /usr/bin/john /opt/john/undrop
      sudo ln -s /usr/bin/john /opt/john/unique
      sudo ln -s /usr/bin/john /opt/john/unshadow
      sudo ln -s /usr/bin/john /opt/john/zip2john
      . ~/.bashrc
    ;;
    "10-01")
      sudo dnf install -y git
      git clone https://github.com/danielmiessler/SecLists.git
      cd SecLists
      rm CONTRIBUTING.md CONTRIBUTORS.md LICENSE README.md SecLists.png
      sudo rm -rf /usr/share/wordlists/*
      sudo mkdir -p /usr/share/wordlists && sudo mv * /usr/share/wordlists/
      cd ..
      rm -rf SecLists
    ;;
    "10-02")
      sudo dnf install -y wget make
      wget http://sourceforge.net/projects/crunch-wordlist/files/latest/download
      mv download download.tgz
      tar xvf download.tgz && rm -rf download.tgz
      crunch=$(find . -maxdepth 1 -name "*crunch*")
      cd "$crunch"
      make && sudo make install
      cd ..
      rm -rf "$crunch"
    ;;
    *)
      sleep 1
    ;;
  esac
done
exit 0
